// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dicelanStore.Models.dicelanApp;

#nullable disable

namespace dicelanStore.Migrations
{
    [DbContext(typeof(dicelanAppContext))]
    [Migration("20241014124229_UpdateUserTableOrOtherChanges")]
    partial class UpdateUserTableOrOtherChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Address", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("city");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Province")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("province");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("street");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Ward")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("ward");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("PK__address__3213E83FD64780C8");

                    b.HasIndex("UserId");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Cart", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__cart__3213E83F95B37650");

                    b.HasIndex("UserId");

                    b.ToTable("cart", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.CartItem", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("CartId", "ProductId")
                        .HasName("PK__cart_ite__6A850DF831EAC01F");

                    b.HasIndex("ProductId");

                    b.ToTable("cart_item", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Image", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<byte[]>("Image1")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("PK__image__3213E83FC239A74A");

                    b.HasIndex("ProductId");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int>("InvoiceStatusId")
                        .HasColumnType("int")
                        .HasColumnName("invoice_status_id");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("payment_method");

                    b.Property<double?>("SubTotal")
                        .HasColumnType("float")
                        .HasColumnName("sub_total");

                    b.Property<double?>("TaxAmount")
                        .HasColumnType("float")
                        .HasColumnName("tax_amount");

                    b.Property<double?>("Total")
                        .HasColumnType("float")
                        .HasColumnName("total");

                    b.HasKey("Id")
                        .HasName("PK__invoice__3213E83F55731F2E");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("OrderId");

                    b.ToTable("invoice", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.InvoiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__invoice___3213E83F9878C31D");

                    b.ToTable("invoice_status", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Material", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__material__3213E83FF7A11FC0");

                    b.ToTable("material", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Order", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int>("DepositId")
                        .HasColumnType("int")
                        .HasColumnName("deposit_id");

                    b.Property<long>("HistoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("history_id");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modified_date");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("order_status_id");

                    b.Property<string>("OrderType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("order_type");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Status")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("status");

                    b.Property<int>("StoreId")
                        .HasColumnType("int")
                        .HasColumnName("store_id");

                    b.Property<double?>("Total")
                        .HasColumnType("float")
                        .HasColumnName("total");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__order__3213E83FF42DBBDE");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<double?>("Discount")
                        .HasColumnType("float")
                        .HasColumnName("discount");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modified_date");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<short?>("Quantity")
                        .HasColumnType("smallint")
                        .HasColumnName("quantity");

                    b.Property<double?>("Total")
                        .HasColumnType("float")
                        .HasColumnName("total");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("unit_price");

                    b.HasKey("Id")
                        .HasName("PK__order_de__3213E83F09F65CAA");

                    b.HasIndex("ProductId");

                    b.ToTable("order_detail", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__order_st__3213E83FB6C6D856");

                    b.ToTable("order_status", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modified_date");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("material_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("name");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int")
                        .HasColumnName("product_type_id");

                    b.Property<short?>("StockQuantity")
                        .HasColumnType("smallint")
                        .HasColumnName("stock_quantity");

                    b.HasKey("Id")
                        .HasName("PK__product__3213E83F14EFC8BE");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__product___3213E83FBC9DBB5B");

                    b.ToTable("product_type", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__role__3213E83F0B785139");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Store", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("city");

                    b.Property<string>("District")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("district");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Province")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("province");

                    b.Property<string>("Street")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("street");

                    b.Property<string>("Ward")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("ward");

                    b.HasKey("Id")
                        .HasName("PK__store__3213E83F3E7FF8A0");

                    b.ToTable("store", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime")
                        .HasColumnName("last_login_time");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PK__user__3213E83F34218B22");

                    b.HasIndex("RoleId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Address", b =>
                {
                    b.HasOne("dicelanStore.Models.dicelanApp.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_address_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Cart", b =>
                {
                    b.HasOne("dicelanStore.Models.dicelanApp.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_cart_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.CartItem", b =>
                {
                    b.HasOne("dicelanStore.Models.dicelanApp.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK_cart_item_cart");

                    b.HasOne("dicelanStore.Models.dicelanApp.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_cart_item_product");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Image", b =>
                {
                    b.HasOne("dicelanStore.Models.dicelanApp.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_image_product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Invoice", b =>
                {
                    b.HasOne("dicelanStore.Models.dicelanApp.InvoiceStatus", "InvoiceStatus")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_invoice_invoice_status");

                    b.HasOne("dicelanStore.Models.dicelanApp.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_invoice_order");

                    b.Navigation("InvoiceStatus");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Order", b =>
                {
                    b.HasOne("dicelanStore.Models.dicelanApp.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_order_order_status");

                    b.HasOne("dicelanStore.Models.dicelanApp.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("FK_order_store");

                    b.HasOne("dicelanStore.Models.dicelanApp.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_order_user");

                    b.Navigation("OrderStatus");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.OrderDetail", b =>
                {
                    b.HasOne("dicelanStore.Models.dicelanApp.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_order_detail_product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Product", b =>
                {
                    b.HasOne("dicelanStore.Models.dicelanApp.Material", "Material")
                        .WithMany("Products")
                        .HasForeignKey("MaterialId")
                        .IsRequired()
                        .HasConstraintName("FK_product_material");

                    b.HasOne("dicelanStore.Models.dicelanApp.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_product_product_type");

                    b.Navigation("Material");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.User", b =>
                {
                    b.HasOne("dicelanStore.Models.dicelanApp.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_user_role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.InvoiceStatus", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Material", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Order", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.Store", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("dicelanStore.Models.dicelanApp.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
